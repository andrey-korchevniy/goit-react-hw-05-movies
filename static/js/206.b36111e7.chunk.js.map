{"version":3,"file":"static/js/206.b36111e7.chunk.js","mappings":"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","sources":["api/api.js","api/getMoviesList.js","pages/Movies/MovieDetails/MovieDetails.styled.js","pages/Movies/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '686ce405e78c10a98219cd1fc59d1c0f';\nconst API_URL = 'https://api.themoviedb.org/3/';\n\nexport const apiRequest = (path, parameter = {}) => {\n    const params = Object.assign({ api_key: API_KEY }, parameter);\n    try {\n        const response = axios.get(API_URL + path, {params})\n        return response;\n    } catch (error) {\n        console.log(error);\n    }\n}","import { apiRequest } from \"./api\";\n\n// getting list of trending\nexport const  getMoviesList = async () => {\n    const response = await apiRequest('trending/movie/week');\n    response.data.results.map(movie => movie.poster_path = movie.poster_path !== null ?\n        (`https://image.tmdb.org/t/p/w500/` + movie.poster_path) : 'https://filmesiseriale.net/img/noposter.jpg' )\n    return response.data.results;\n}\n\n// getting list of movies by search\nexport const getMoviesSearch = async (query) => {\n    if (query !== '') {\n        try {\n            const response = await apiRequest('search/movie', { query: query });\n            response.data.results.map(movie => movie.poster_path = movie.poster_path !== null ?\n        (`https://image.tmdb.org/t/p/w500/` + movie.poster_path) : 'https://filmesiseriale.net/img/noposter.jpg')\n            return response.data;\n        } catch {\n        }\n    } else {\n        return {results: [], total_results: -1}\n    }\n}\n\n// get an info of one movie\nexport const getMovieInfo = async (id) => {\n    \n    const response = await apiRequest(`movie/${id}`);\n    response.data.poster_path = response.data.poster_path !== null ? (`https://image.tmdb.org/t/p/w500/` + response.data.poster_path) : ('https://filmesiseriale.net/img/noposter.jpg');\n    return response.data;\n}\n\n// get cast\nexport const getCast = async (id) => {\n\n    const response = await apiRequest(`movie/${id}/credits`);\n    response.data.cast.map(actor => actor.profile_path = actor.profile_path !== null ?\n        (`https://image.tmdb.org/t/p/w500` + actor.profile_path) : ('https://png.pngitem.com/pimgs/s/49-498069_talk-about-random-wiki-shy-guy-mario-hd.png'))\n    return response.data.cast;\n}\n\n// get reviews\nexport const getReviews = async (id) => {\n    const response = await apiRequest(`movie/${id}/reviews`);\n    return response.data.results;\n}","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    display: flex;\n    margin: 10px;\n`\nexport const Info = styled.div`\n    margin: 10px;\n`\nexport const Img = styled.img`\n    width: 200px;\n`","import { useState, useEffect } from \"react\";\nimport { getMovieInfo } from \"api/getMoviesList\";\nimport { Wrapper, Img, Info } from \"./MovieDetails.styled\";\nimport { Outlet, Link, useParams, useLocation } from \"react-router-dom\";\nimport { Button } from \"components/Button/Button\";\n\nconst MovieDetails = () => {\n\n    const [movieInfo, setMovieInfo] = useState({});         // API movie info \n    const { movieId } = useParams();                        // the movie id\n    const location = useLocation();\n    const backLinkHref = location.state?.from ?? \"/\";\n\n    useEffect(() => {\n        getMovieInfo(movieId).then(setMovieInfo).catch()\n    }, [movieId]);\n\n    const { poster_path, title, release_date, vote_average, overview, genres } = movieInfo;\n\n    if (poster_path !== undefined) {\n        return (\n            <main>\n                <Button path={backLinkHref} title={`Go back`} />\n                <Wrapper>\n                    <Img src={poster_path} alt='movie poster' />\n                    <Info>\n                        <h2>{title} ({release_date.slice(0, 4)})</h2>\n                        <p>User Score: {(vote_average * 10).toFixed(0)}%</p>\n                        <h3>Overview</h3>\n                        <p>{overview}</p>\n                        <h3>Genres</h3>\n                        <p>{genres.map(genre => <span key={genre.name}>{genre.name}  </span>)}</p>\n                    </Info>\n                </Wrapper>\n                <hr></hr>\n                <Info>\n                    <h4>Additional information</h4>\n                    <ul>\n                        <li><Link to=\"cast\">Cast</Link></li>\n                        <li><Link to=\"reviews\">Reviews</Link></li>\n                    </ul>\n                </Info>\n                <hr></hr>\n                <Outlet />\n            </main>\n        )\n    }\n}\n\nexport default MovieDetails;"],"names":["API_KEY","API_URL","apiRequest","path","parameter","params","Object","assign","api_key","response","axios","error","console","log","getMoviesList","data","results","map","movie","poster_path","getMoviesSearch","query","total_results","getMovieInfo","id","getCast","cast","actor","profile_path","getReviews","Wrapper","styled","Info","Img","useState","movieInfo","setMovieInfo","movieId","useParams","backLinkHref","useLocation","state","from","useEffect","then","catch","title","release_date","vote_average","overview","genres","undefined","Button","src","alt","slice","toFixed","genre","name","to"],"sourceRoot":""}